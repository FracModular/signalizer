/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#ifndef _MAINEDITOR_H
	#define _MAINEDITOR_H

	#include <cpl/Common.h>
	#include "PluginProcessor.h"
	#include <cpl/GraphicComponents.h>
	#include <cpl/ComponentContainers.h>
	#include <cpl/CBaseControl.h>
	#include <cpl/CViews.h>
	#include <map>
	#include <stack>
	#include "SignalizerDesign.h"
	#include <array>

	namespace Signalizer
	{

		class MainEditor
		: 
			public		AudioProcessorEditor, 
			private		juce::Timer, 
			private		juce::HighResolutionTimer,
			protected	cpl::CBaseControl::PassiveListener,
			private		cpl::CBaseControl::ValueFormatter,
			public		cpl::CTopView, 
			protected	cpl::CTextTabBar<>::CTabBarListener,
			private		juce::ComponentBoundsConstrainer,
			protected	juce::KeyListener,
			public		juce::ComponentListener
		{

		public:

			MainEditor(SignalizerAudioProcessor * e);
			~MainEditor();

			// CView overrides
			juce::Component * getWindow() override { return this; }
			void load(cpl::CSerializer & se, long long int version) override;
			void save(cpl::CSerializer & se, long long int version) override;
			std::unique_ptr<juce::Component> createEditor() override;
			void panelOpened(cpl::CTextTabBar<> * obj) override;
			void panelClosed(cpl::CTextTabBar<> * obj) override;
			void tabSelected(cpl::CTextTabBar<> * obj, int index) override;
			void suspend() override;
			void resume() override;

			// Components and listeners.
			virtual bool keyPressed(const KeyPress &key, Component *originatingComponent) override;
			void paint(Graphics& g) override;
			void resized() override;
			void resizeEnd() override;
			void resizeStart() override;
			void focusGained(FocusChangeType cause) override;
			void focusLost(FocusChangeType cause) override;

			void componentMovedOrResized(Component& component,
				bool wasMoved,
				bool wasResized) override;
			void componentParentHierarchyChanged(Component& component) override;

			// timers
			void timerCallback() override;
			void hiResTimerCallback() override;

			// functionality
			void setRefreshRate(int rateInMs);
			void updatePresetList();
			// no parameter = fetch antialiasing from UI combo box
			void setAntialiasing(int multiSamplingLevel = -1);
			// doesn't actually change anything - only updates the selected value in the preset list.
			void setSelectedPreset(juce::File newPreset);

		protected:
			// cpl::CBaseControl interface
			void valueChanged(const cpl::CBaseControl * cbc) override;
			bool stringToValue(const cpl::CBaseControl * ctrl, const std::string & valString, cpl::iCtrlPrec_t & val) override;
			bool valueToString(const cpl::CBaseControl * ctrl, std::string & valString, cpl::iCtrlPrec_t val) override;
			void onObjectDestruction(const cpl::Utility::DestructionServer<cpl::CBaseControl>::ObjectProxy & destroyedObject) override;
		private:

			// the z-ordering system ensures this is basically a FIFO system
			void pushEditor(juce::Component * editor);
			void pushEditor(std::unique_ptr<juce::Component> editor);
			juce::Component * getTopEditor() const;
			void popEditor();
			void clearEditors();
			cpl::CView * viewFromIndex(std::size_t index);
			void addTab(const std::string & name);
			void restoreTab();
			int getRenderEngine();
			void initUI();

			void suspendView(cpl::CView * view);
			void initiateView(cpl::CView * view);
			void enterFullscreenIfNeeded(juce::Point<int> where);
			void enterFullscreenIfNeeded();
			void exitFullscreen();


			// Relations
			SignalizerAudioProcessor * engine;

			// Constant UI
			cpl::CTextTabBar<> tabs;
			cpl::CSVGButton ksettings, kfreeze, ksync, kidle, kkiosk;

			// Editor controls
			cpl::CButton kstableFps, kloadPreset, ksavePreset, ksaveDefaultPreset, kloadDefaultPreset, kvsync;
			cpl::CKnobSlider krefreshRate;
			cpl::CComboBox krenderEngine, kpresetList, kantialias;
			std::array<cpl::CColourControl, cpl::CLookAndFeel_CPL::numColours>  colourControls;

			// state variables.
			int refreshRate;
			int viewTopCoord;
			std::size_t selTab;
			cpl::iCtrlPrec_t oldRefreshRate;
			bool unFocused, idleInBack, isEditorVisible, firstKioskMode, hasAnyTabBeenSelected;
			juce::Point<int> kioskCoords;

			// View related data
			Signalizer::CDefaultView defaultView;
			juce::OpenGLContext oglc;
			std::map<std::string, std::unique_ptr<cpl::CSubView>> views;
			std::stack<std::unique_ptr<juce::Component>> editorStack;
			cpl::CView * currentView;
			ResizableCornerComponent rcc;
			cpl::CSerializer viewSettings;

		};
	};

#endif  // MainEditor
